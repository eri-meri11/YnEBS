{"ast":null,"code":"import { create } from \"ipfs-http-client\";\nconst ipfs = create({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\nexport const uploadToIPFS = async data => {\n  try {\n    const {\n      path\n    } = await ipfs.add(data);\n    return path;\n  } catch (error) {\n    console.error(\"IPFS yükleme hatası:\", error);\n  }\n};\nexport const fetchFromIPFS = async hash => {\n  try {\n    const response = await fetch(`https://ipfs.infura.io/ipfs/${hash}`);\n    return await response.json();\n  } catch (error) {\n    console.error(\"IPFS'ten veri çekme hatası:\", error);\n  }\n};","map":{"version":3,"names":["create","ipfs","host","port","protocol","uploadToIPFS","data","path","add","error","console","fetchFromIPFS","hash","response","fetch","json"],"sources":["/home/ege/web/src/ipfs.js"],"sourcesContent":["import { create } from \"ipfs-http-client\";\n\nconst ipfs = create({ host: \"ipfs.infura.io\", port: 5001, protocol: \"https\" });\n\nexport const uploadToIPFS = async (data) => {\n  try {\n    const { path } = await ipfs.add(data);\n    return path;\n  } catch (error) {\n    console.error(\"IPFS yükleme hatası:\", error);\n  }\n};\n\nexport const fetchFromIPFS = async (hash) => {\n  try {\n    const response = await fetch(`https://ipfs.infura.io/ipfs/${hash}`);\n    return await response.json();\n  } catch (error) {\n    console.error(\"IPFS'ten veri çekme hatası:\", error);\n  }\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,kBAAkB;AAEzC,MAAMC,IAAI,GAAGD,MAAM,CAAC;EAAEE,IAAI,EAAE,gBAAgB;EAAEC,IAAI,EAAE,IAAI;EAAEC,QAAQ,EAAE;AAAQ,CAAC,CAAC;AAE9E,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMN,IAAI,CAACO,GAAG,CAACF,IAAI,CAAC;IACrC,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAOC,IAAI,IAAK;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+BF,IAAI,EAAE,CAAC;IACnE,OAAO,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}